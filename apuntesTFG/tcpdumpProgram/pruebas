TCPDUMP (/home/martin/tcpdump) ADAPTACION LLVM

git clone https://github.com/the-tcpdump-group/libpcap.git
cd libpcap && mkdir build && cd build
pip install --break-system-packages --upgrade wllvm && export CC=wllvm && export CXX=wllvm++ && export LLVM_COMPILER=clang
sudo apt-get install flex
cmake ..
make
sudo make install
cd ../..

git clone https://github.com/the-tcpdump-group/tcpdump.git
cd tcpdump && mkdir build && cd build
pip install --break-system-packages --upgrade wllvm && export CC=wllvm && export CXX=wllvm++ && export LLVM_COMPILER=clang
cmake .. && make && sudo make install


PROBLEMA:
El problema no radica en la compilación, sino en la ejecución de klee, que es quien no encuentra las bibliotecas
Sí incluye, por defecto, la biblio dinámica libpcap.so, pero no se encuentran las funciones, undefined reference

export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH en bashrc OK
Problema persistente tras usar 
	LD_DEBUG=all klee --optimize --libc=uclibc --posix-runtime ./tcpdump.bc -- -i wlp2s0 -> 
		klee: error: symbol lookup error: undefined symbol: pcap_findalldevs (fatal)
		
tcpdump (ejecutable) si contiene a libpcap.so.1, y esta si contiene por ejemplo, a pcap_findalldevs
RECOMPILAR KLEE -> Posible solución


#list(APPEND CMAKE_LIBRARY_PATH /usr/local/lib) # Durante configuración del proyecto
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_RPATH}:/usr/local/lib")  # Durante instalación del proyecto
message(STATUS "PATHHHHHH ${CMAKE_INSTALL_RPATH}")
target_link_libraries(klee
    libarchive.so.20
    libpcap.so.1
    libopenjp2.so.7
)


make VERBOSE=1 para ver traza de compilaciones+enlaces
permisos previos bibliotecas chmod 644 (rw-r--r--)
permisos posteriores bibliotecas chmod 755 (rwxr-xr-x)
-------------------------------------------------------------------------------------------------------------


TCPDUMP (/home/martin/tcpdump),  ADAPTACION GCOV   PENDIENTE


-------------------------------------------------------------------------------------------------------------


PRUEBAS Klee:
klee --warnings-only-to-file --only-output-states-covering-new --write-kqueries --optimize --libc=uclibc --posix-runtime ./tcpdump.bc -- -i wlp2s0 --sym-args 0 2 5

LD_DEBUG=all klee --optimize --libc=uclibc --posix-runtime ./tcpdump.bc -- -i wlp2s0 

    
Los tamaños (en bits) para el argumento -sym-files han sido elegidos en función de lo considerado respecto a las limitaciones de memoria del equipo actual. Al no tener suficientes recursos computacionales, el aumento de tamaño carece de sentido pues los resultados no son suficientementes eficientes y óptimos.


#Para archivos klee/tools/TOOL/CMakeLists.txt, TOOL € {klee, kleaver, klee-exec-tree, ...)
add_executable(klee
  main.cpp
)


target_include_directories(klee PRIVATE /usr/include)

set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_RPATH}:/usr/local/lib")

find_library(LIB_ARCHIVE NAMES libarchive.so.20 PATHS /usr/local/lib)
find_library(LIB_PCAP NAMES libpcap.so.1 PATHS /usr/local/lib)
find_library(LIB_OPENJP2 NAMES libopenjp2.so.7 PATHS /usr/local/lib)

if(LIB_ARCHIVE)
    message(STATUS "Found klee_libarchive: ${LIB_ARCHIVE}")
else()
    message(FATAL_ERROR "klee_libarchive not found")
endif()

if(LIB_PCAP)
    message(STATUS "Found klee_libpcap: ${LIB_PCAP}")
else()
    message(FATAL_ERROR "klee_libpcap not found")
endif()

if(LIB_OPENJP2)
    message(STATUS "Found klee_libopenjp2: ${LIB_OPENJP2}")
else()
    message(FATAL_ERROR "klee_libopenjp2 not found")
endif()

set(KLEE_LIBS
  kleeCore
  ${LIB_ARCHIVE}
  ${LIB_PCAP}
  ${LIB_OPENJP2}
)

target_link_libraries(klee PRIVATE ${KLEE_LIBS})
target_include_directories(klee PRIVATE ${KLEE_INCLUDE_DIRS} ${LLVM_INCLUDE_DIRS})
target_compile_options(klee PRIVATE ${KLEE_COMPONENT_CXX_FLAGS})
target_compile_definitions(klee PRIVATE ${KLEE_COMPONENT_CXX_DEFINES})

install(TARGETS klee RUNTIME DESTINATION bin)
add_dependencies(klee BuildKLEERuntimes)

      
    
    
