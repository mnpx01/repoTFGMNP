OPENJPEG (/home/martin/openjpeg) ADAPTACION LLVM

git clone https://github.com/uclouvain/openjpeg.git

cd openjpeg && mkdir build && cd build

pip install --break-system-packages --upgrade wllvm && export CC=wllvm && export CXX=wllvm++ && export LLVM_COMPILER=clang && export CMAKE_C_FLAGS="-emit-llvm" && export CMAKE_CXX_FLAGS="-emit-llvm"
sudo apt-get install liblcms2-dev  libtiff-dev libpng-dev libz-dev
cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_THIRDPARTY:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON
make
sudo make install

export CFLAGS="-g" && export CXXFLAGS="-g"

cd bin
extract-bc libopenjp2.a
extract-bc opj_compress

-------------------------------------------------------------------------------------------------------------


OPENJPEG (/home/martin/openjpeg),  ADAPTACION GCOV

git clone https://github.com/uclouvain/openjpeg.git

cd openjpeg && mkdir gcovbuild && cp -R ./!(gcovbuild|build) ./gcovbuild/ && cd gcovbuild
rm -f $(find . -type f \( -name "*.gcda" -o -name "*.gcno" \))

cmake . -DCMAKE_C_FLAGS="-fprofile-arcs -ftest-coverage -O0" -DCMAKE_EXE_LINKER_FLAGS="-fprofile-arcs -ftest-coverage -O0"
make

cd bin
./opj_compress -i prueba.png -o outputprueba1.jp2 <- el comando elegido interfiere en el resultado de la cobertura

cd ../src/bin/jp2/CMakeFiles/opj_compress.dir
mv opj_compress.c.gcno opj_compress.gcno && mv opj_compress.c.gcda opj_compress.gcda

cd ../../
gcov -abcfHlm -o ./CMakeFiles/opj_compress.dir opj_compress.c <- EJECUTAR PARA PASAR INFO A MEMORIA

GCOV considera solo las líneas de los archivos usados, no de la aplicación entera, OPCIONES: abcfHlm, para Latex excluimos la f,
redactar con info de la página oficial
-------------------------------------------------------------------------------------------------------------

PENDIENTES DE EJECUCION
PRUEBAS Klee: tests de 0 a 13 prametros, posibilidad de archivos, no stdin, si stdout
klee --warnings-only-to-file --only-output-states-covering-new --external-calls=all --link-llvm-lib=libopenjp2.bca --write-kqueries --max-solver-time=30 --max-time=3600 --optimize --libc=uclibc --posix-runtime ./opj_compress.bc

1. --sym-args 0 13 8
2. --sym-args 0 13 8 --sym-files 1 64
3. --sym-args 0 13 8 --sym-files 1 64 --sym-stdout
4. --sym-args 0 13 8 --sym-files 1 64 --sym-stdout --sym-stdin 1024
5. --sym-args 0 13 8 --sym-files 1 64 --sym-stdout --sym-stdin 2048
6. -- -i prueba.png -o outputprueba1.jp2
7. -- -i prueba.png -o outputprueba2.jp2 -r 40
8. -- -i prueba.png -o outputprueba3.jp2 -t 1024,1024
9. -- -i prueba.png -o outputprueba4.jp2 -n 6   
10. -- -i prueba.png -o outputprueba5.jp2 -q 40,60,80
11. -- -i prueba.png -o outputprueba6.jp2 -q 30,40,50 -n 6 -t 2048,204
12. -- -i prueba.png -o outputprueba7.jp2 -r 40 -n 6 -t 1024,1024 --sym-args 0 13 8 --sym-files 1 64 --sym-stdout --sym-stdin 2048

    
Los tamaños (en bits) para el argumento -sym-files han sido elegidos en función de lo considerado respecto a las limitaciones de memoria del equipo actual. Al no tener suficientes recursos computacionales, el aumento de tamaño carece de sentido pues los resultados no son suficientementes eficientes y óptimos.





###gcc -o opj_compress opj_compress.c openjpeg.c openjpeg.h convert.c convert.h index.c index.h opj_apps_config.h opj_config.h ###opj_config_private.h opj_getopt.c opj_getopt.h format_defs.h opj_clock.c opj_clock.h opj_includes.c opj_malloc.c opj_malloc.h event.c event.h ###function_list.c function_list.h bio.c bio.h cio.c cio.h thread.c thread.h tls_keys.h image.c image.h invert.c invert.h j2k.c j2k.h jp2.c jp2.h ###mqc.c mqc.h pi.c pi.h tgt.c tgt.h tcd.c tcd.h t1.c t1.h dwt.c dwt.h t2.c t2.h opj_common.h mct.c mct.h opj_intmath.h sparse_array.c ###sparse_array.h opj_string.h mqc_inl.h opj_codec.h

      
    

